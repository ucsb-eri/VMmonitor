var express = require('express');
var path = require('path');
var bodyParser = require('body-parser');

var routes = require('./routes/index');
var upload = require('./routes/upload');

var app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', routes);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
    var err = new Error('Not Found');
    err.status = 404;
    next(err);
});

// error handlers

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
    app.use(function(err, req, res, next) {
        res.status(err.status || 500);
        res.render('error', {
            message: err.message,
            error: err
        });
    });
}

// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
        message: err.message,
        error: {}
    });
});

/*function generateDB(json) {
    
    var host_schema = 'host TEXT unique, ds TEXT, cpu INTEGER, fqdn TEXT, ctime INTEGER, mem INTEGER';
    var g_schema='host TEXT, ds TEXT, ctime INTEGER, osType TEXT, fsType TEXT, path TEXT, cpuTime INTEGER, memMax INTEGER default 0, memUsed INTEGER default 0, cpuMax INTEGER default 1, cpuUsed INTEGER default 1, state TEXT';
    var latest_schema='guest TEXT unique, '+g_schema;
    var guest_schema='guest TEXT, '+g_schema;

    db.serialize(function() {
    //create tables
        db.run('CREATE TABLE IF NOT EXISTS hosts (' + host_schema + ')');
        db.run('CREATE TABLE IF NOT EXISTS guests (' + guest_schema + ')');
        db.run('CREATE TABLE IF NOT EXISTS latest (' + latest_schema + ')');
    

    //insert data into db
    //host data first
        var hostdata = json['hostData'];
        //convert unixtime to yyyy-mm-dd
        var dt = new Date(hostdata['generateTime']*1000);
        var datestamp = [dt.getUTCFullYear(), dt.getUTCMonth()+1, dt.getUTCDate()].join('-');
        var data = [
            hostdata['host'],
            datestamp,
            hostdata['cpuCount'],
            hostdata['fqdn'],
            hostdata['generateTime'],
            hostdata['memoryBytes'],
        ];
        db.run('INSERT OR IGNORE INTO hosts VALUES (?, ?, ?, ?, ?, ?)', data);


    //guest data next
        var guests = [];
        for(i=0; i<json['inactiveVMs'].length; i++) {
            guests.push(json['inactiveVMs'][i]);
        }
        for(i=0; i<json['activeVMs'].length; i++) {
            guests.push(json['activeVMs'][i]);
        }
        
        for(i=0; i<guests.length; i++) {
            var VM = guests[i]  
            data = [
                VM['name'],                 //guest vm name
                hostdata['host'],           //host name
                datestamp,                  //datestamp
                hostdata['generateTime'],   //ctime,
                VM['OSType'],               //osType
                VM['FSType'],               //fsType
                VM['path'],                 //path
                VM['cpuTime'],              //cpuTime
                VM['maxMem'],               //memMax
                VM['memoryUsed'],           //memUsed
                VM['numOfCpu'],             //cpuMax
                VM['numOfCpu'],             //cpuUsed
                VM['state'],                //state
            ];

            //writing guests
                db.run('INSERT INTO guests VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', data);
            //writing latest
                //  input is generated by virtu immediately before posting
                //  we can assume that data is the newest pair
                db.run('INSERT OR REPLACE INTO latest VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', data);
        } //end for loop
    });

}

app.post('/', function(req, res) {
    res.send();
    console.log('received data');
    generateDB(req.body);
});*/


module.exports = app;
